import { useEffect, useState } from "react";
import axios from "axios";
import { useNavigate } from "react-router-dom";
import MapPicker from "../components/MapPicker"; // –ø—É—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π –ø–æ–¥ –ø—Ä–æ–µ–∫—Ç

function getLevelColor(level) {
  if (level === "–æ—Ç–ª–∏—á–Ω—ã–π") return "#51d88a";
  if (level === "—Å—Ä–µ–¥–Ω–∏–π") return "#ffc107";
  if (level === "—Å–ª–∞–±—ã–π") return "#ff5f5f";
  return "#aab";
}

export default function Home() {
  const [fishings, setFishings] = useState([]);
  const [fishList, setFishList] = useState([]);
  const [form, setForm] = useState({
    location: "",
    date: new Date().toISOString().slice(0, 10),
    species: "",
    timeOfDay: "—É—Ç—Ä–æ"
  });
  const [coords, setCoords] = useState({ lat: null, lon: null });
  const [forecast, setForecast] = useState(null);
  const [forecastError, setForecastError] = useState("");
  const navigate = useNavigate();

  // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä—ã–± —Å —Å–µ—Ä–≤–µ—Ä–∞
  useEffect(() => {
    axios.get("http://localhost:4000/api/species")
      .then(res => {
        setFishList(res.data);
        setForm(f => ({ ...f, species: res.data[0] || "" }));
      })
      .catch(() => setFishList([]));
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä—ã–±–∞–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const fetchFishings = async () => {
      try {
        const token = localStorage.getItem("token");
        const res = await axios.get("http://localhost:4000/api/fishing", {
          headers: { Authorization: "Bearer " + token }
        });
        setFishings(res.data);
      } catch (e) {
        setFishings([]);
      }
    };
    fetchFishings();
  }, []);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Å—Ç–æ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º (—Ä–µ–∫–∞, –æ–∑–µ—Ä–æ, –≥–æ—Ä–æ–¥, ...).
  useEffect(() => {
    async function fetchPlace() {
      if (coords.lat && coords.lon) {
        try {
          const res = await axios.get(
            `http://localhost:4000/api/reverse-geocode?lat=${coords.lat}&lon=${coords.lon}`
          );
          // 1. –ü—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–æ–¥–æ—ë–º–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
          const a = res.data.raw?.address || {};
          const water =
            a.water || a.river || a.lake || a.reservoir || a.stream;
          if (water) {
            // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–¥–ø–∏—Å—å: —Ä–µ–∫–∞/–æ–∑–µ—Ä–æ + –≥–æ—Ä–æ–¥/—Ä–µ–≥–∏–æ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å
            let place = water;
            if (a.city) place += `, ${a.city}`;
            else if (a.town) place += `, ${a.town}`;
            else if (a.state) place += `, ${a.state}`;
            setForm(f => ({ ...f, location: place }));
          } else if (res.data.place) {
            setForm(f => ({ ...f, location: res.data.place }));
          }
        } catch (e) {
          // –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        }
      }
    }
    fetchPlace();
  }, [coords.lat, coords.lon]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–ª—ë–≤–∞
  const handleChange = e => {
    setForm(f => ({ ...f, [e.target.name]: e.target.value }));
  };

  const handleForecast = async e => {
    e.preventDefault();
    setForecast(null);
    setForecastError("");
    try {
      let lat, lon;
      if (coords.lat && coords.lon) {
        lat = coords.lat;
        lon = coords.lon;
      } else if (form.location) {
        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–µ—Å—Ç–∞
        const geo = await axios.get("http://localhost:4000/api/geocode?city=" + encodeURIComponent(form.location));
        lat = geo.data.lat;
        lon = geo.data.lon;
      } else {
        setForecastError("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ!");
        return;
      }
      const token = localStorage.getItem("token");
      const res = await axios.post(
        "http://localhost:4000/api/forecast",
        { species: form.species, lat, lon, date: form.date, timeOfDay: form.timeOfDay },
        { headers: { Authorization: "Bearer " + token } }
      );
      setForecast(res.data);
    } catch (e) {
      setForecastError(e.response?.data?.error || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞");
    }
  };

  // –°–±—Ä–æ—Å–∏—Ç—å –≤—ã–±–æ—Ä —Ç–æ—á–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
  const resetCoords = () => setCoords({ lat: null, lon: null });

  return (
    <div>
      <h1>–ì–ª–∞–≤–Ω–∞—è ‚Äî AI-Fishing</h1>
      <form onSubmit={handleForecast} style={{ marginBottom: 20, border: "1px solid #ccc", padding: 10, borderRadius: 8 }}>
        <h3>–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –∫–ª—ë–≤–∞</h3>
        <div style={{ marginBottom: 8 }}>
          <label>–ì–¥–µ –ª–æ–≤–∏—Ç—å:&nbsp;
            <input
              name="location"
              value={form.location}
              onChange={handleChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ"
              style={{ marginRight: 10 }}
              disabled={coords.lat && coords.lon}
            />
          </label>
        </div>
        <div style={{ marginBottom: 12 }}>
          <b>–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ –∫–∞—Ä—Ç–µ:</b>
          <MapPicker
            lat={coords.lat || 53.15538}
            lon={coords.lon || 48.47412}
            onChange={setCoords}
          />
          <button
            type="button"
            onClick={async () => {
              if ("geolocation" in navigator) {
                navigator.geolocation.getCurrentPosition(
                  pos => {
                    setCoords({ lat: pos.coords.latitude, lon: pos.coords.longitude });
                  },
                  err => {
                    alert("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é");
                  }
                );
              } else {
                alert("–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–∞—à–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º");
              }
            }}
            style={{
              margin: "8px 0",
              padding: "4px 10px",
              borderRadius: 6,
              border: "1px solid #bbb",
              background: "#f2f8ff",
              color: "#2563eb",
              cursor: "pointer"
            }}
          >
            üìç –ú–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
          </button>

          {coords.lat && coords.lon && (
            <div style={{ fontSize: 12, color: "#888", marginTop: 4 }}>
              –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {coords.lat.toFixed(6)}, {coords.lon.toFixed(6)}
              &nbsp;
              <button
                type="button"
                style={{
                  background: "#eee",
                  border: "none",
                  color: "#333",
                  marginLeft: 8,
                  padding: "2px 6px",
                  borderRadius: 4,
                  cursor: "pointer"
                }}
                onClick={resetCoords}
              >
                √ó –°–±—Ä–æ—Å–∏—Ç—å —Ç–æ—á–∫—É
              </button>
            </div>
          )}
        </div>
        <div style={{ marginBottom: 8 }}>
          <label>–î–∞—Ç–∞:&nbsp;
            <input
              name="date"
              type="date"
              value={form.date}
              onChange={handleChange}
              required
              style={{ marginRight: 10 }}
            />
          </label>
        </div>
        <div style={{ marginBottom: 8 }}>
          <label>–í–∏–¥ —Ä—ã–±—ã:&nbsp;
            <select
              name="species"
              value={form.species}
              onChange={handleChange}
              required
              style={{ marginRight: 10 }}
            >
              {fishList.map(f => (
                <option key={f} value={f}>{f}</option>
              ))}
            </select>
          </label>
        </div>
        <div style={{ marginBottom: 8 }}>
          <label>–í—Ä–µ–º—è —Å—É—Ç–æ–∫:&nbsp;
            <select
              name="timeOfDay"
              value={form.timeOfDay}
              onChange={handleChange}
              style={{ marginRight: 10 }}
            >
              <option value="—É—Ç—Ä–æ">–£—Ç—Ä–æ</option>
              <option value="–¥–µ–Ω—å">–î–µ–Ω—å</option>
              <option value="–≤–µ—á–µ—Ä">–í–µ—á–µ—Ä</option>
              <option value="–Ω–æ—á—å">–ù–æ—á—å</option>
            </select>
          </label>
        </div>
        <button type="submit">–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑</button>
      </form>
      {forecast && (
        <div style={{
          border: `2px solid ${getLevelColor(forecast.level)}`,
          background: "#fafdff",
          marginBottom: 20,
          padding: 14,
          borderRadius: 10
        }}>
          <div style={{
            display: "flex",
            alignItems: "center",
            marginBottom: 4
          }}>
            <span style={{
              width: 16, height: 16,
              borderRadius: "50%",
              display: "inline-block",
              background: getLevelColor(forecast.level),
              marginRight: 8
            }}></span>
            <b>–ö–ª—ë–≤: {forecast.level?.toUpperCase() || "?"}</b>
          </div>
          <pre style={{ whiteSpace: "pre-wrap", fontFamily: "inherit", margin: 0 }}>
            {forecast.explanation}
          </pre>
        </div>
      )}
      {forecastError && <div style={{ color: "red", marginBottom: 20 }}>{forecastError}</div>}

      <button onClick={() => navigate("/add")}>–î–æ–±–∞–≤–∏—Ç—å —Ä—ã–±–∞–ª–∫—É</button>
      <h2>–ú–æ–∏ —Ä—ã–±–∞–ª–∫–∏:</h2>
      {fishings.length === 0 && <p>–ù–µ—Ç —Ä—ã–±–∞–ª–æ–∫. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é!</p>}
      <ul>
        {fishings.map(f => (
          <li key={f.id}>
            <b>{f.location}</b> ‚Äî {new Date(f.date).toLocaleDateString()} ‚Äî {f.fishSpecies?.join(", ")}
          </li>
        ))}
      </ul>
    </div>
  );
}
